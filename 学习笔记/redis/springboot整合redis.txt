1.pom导入依赖
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-data-redis</artifactId>   <!-- 默认使用lettuce客户端驱动,而非jedis -->
    </dependency>

    <dependency>
        <groupId>org.apache.commons</groupId>
        <artifactId>commons-pool2</artifactId>
    </dependency>

2.配置redis连接,数据源和spring缓存
    #redis配置
    spring.redis.timeout= 3000
    spring.redis.host=localhost
    spring.redis.port=6379
    spring.redis.password=root

    #redis数据源配置
    #连接池最大连接数
    spring.redis.lettuce.pool.max-active=20
    #连接池最大空闲连接
    spring.redis.lettuce.pool.max-idle=5
    spring.redis.lettuce.pool.min-idle=0
    #连接池最大阻塞等待时间
    spring.redis.lettuce.pool.max-wait=200

    #配置spring缓存管理器
    spring.cache.type=redis
    spring.cache.cache-names=redisCache

3.编写redis配置类,注册RedisTemplate,并配置序列化器
    // 关于序列化器: RedisTemplate默认的序列化器是JDKSerializationRedisSerializer
    @Configuration
    @EnableCaching
    public class RedisConfig {
        /**
        * 初始化 RedisTemplate<K, V>
        * @param factory redis连接工厂由springboot自动生成,这里直接从spring容器中拿来用,
        *                不使用spring boot时需要自己创建RedisConnectionFactory的bean
        * @return
        */
        @Bean
        public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory factory) {
            RedisTemplate<String, Object> template = new RedisTemplate<>();
            template.setConnectionFactory(factory);

            // 设置key和hashKey的序列化器
            RedisSerializer<String> stringSerializer = template.getStringSerializer();
            template.setKeySerializer(stringSerializer);
            template.setHashKeySerializer(stringSerializer);
            return template;
        }
    }

4.以上,整合redis工作就基本完成了,可以通过redisTemplate来操作redis了
    因为配置了spring缓存管理器,且用@EnableCaching开启了缓存所以可以在service层的方法上通过缓存注解使用redis作为缓存了.
        例如:
            @Cacheable(value = "redisCache", key = "'redis_user_' + #id")
                优先从缓存中获取,以方法入参的id为key
            @CachePut(value =  "redisCache", key = "'redis_user_' + #result.id")
                方法执行后,把返回值放入缓存
            @CachePut(value =  "redisCache", key = "'redis_user_' + #result.id", condition = "#result != null ")
                返回值为空时不缓存,有返回值才缓存
            @CacheEvict(value =  "redisCache", key = "'redis_user_' + #result.id", beforeInvocation = false)
                方法执行后删除缓存中的key

5.怎么使用redisTemplate看文件夹下的其他文章...