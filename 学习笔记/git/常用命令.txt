pwd:    显示当前所在目录
mkdir:  创建目录
    示例: $ mkdir newFile
cd: 进入目录

cat <file>: 显示该文件内容

git clone <url> [新文件夹名]:   使用URL克隆远程仓库到本地,可以修改项目文件夹名

git config: 应该是用来进行git的配置
    git config --list:  查看Git的所有配置
    git config --global --unset <配置项>:   删除某个全局配置
    git config --global --edit <配置项>:    编辑某项全局配置

git init:   把当前所在目录变成git管理的仓库,
            (在当前目录下创建.git文件夹,且当前目录内的文件并未被追踪,需要手动add)

git add <file>: 把指定文件的改动添加到暂存区
        ***这是个多功能命令：可以用它开始跟踪新文件，或者把已跟踪的文件放到暂存区，
        ***还能用于合并时把有冲突的文件标记为已解决状态等。 
        ***将这个命令理解为“添加内容到下一次提交中”而不是“将一个文件添加到项目中”要更加合适。
    git add .:      把当前目录及子目录的改动添加到暂存区
    git add all:    把所有改动提交到暂存区

git commit: 提交暂存区的修改,这种方式会启动文本编辑器以便输入本次提交说明(我的默认使用vsc)
    git commit -v:  弹出的文本在git commit的基础上,显示更详细的改动内容
    git commit -m <message>:    在 commit 命令后添加 -m 选项，将提交信息与命令放在同一行
        示例: $ git commit -m "wrote a readme file"
    git commit -a:  跳过使用暂存区,直接把工作目录中的改动提交(谨慎使用,可能会将不需要的文件添加到提交中)

git status <file>:  展示当前仓库状态(比如哪些文件发生修改等等)
    git status -s:  更简洁地展示状态信息(s是指short)

git diff <file>:    工作区 ××× 暂存区  ==>即,显示尚未暂存的改动
    git diff HEAD <-- file>:    工作区 ××× 仓库
    git diff --cached:  暂存区 ××× 仓库  ==>即,显示暂存未提交的改动
    git diff --staged:  同上

git log <--参数>
    显示日志,按q退出日志界面
        参数:
            --pretty=oneline    (每条记录仅显示一行)
git reset
    git reset HEAD file:    放弃指定文件的缓存(相当于撤销add操作,工作区的改动并没有被撤销)
    git reset --hard commit_id: 修改当前版本.commit_id可以填:commit_id或者head^,head^^,...head~100

git reflog
    显示版本历史以及使用过的修改版本的命令,可以用这个命令获取之前使用过的命令,并从该命令中得到commit id

git checkout
    git checkout -- file:   未使用add缓存代码时,删除掉工作区中的改动(和缓存区保持一致,相当于把缓存区检出到工作区) 
    (*** git2.0以后的版本,使用git restore file 来放弃工作区的修改 ***)

git rm <file>:  把指定文件移除版本控制(!!!小心:工作目录下的文件也一并删除了!)(谨慎使用)
    示例: git rm log/\*.log 删除 log/ 目录下扩展名为 .log 的所有文件(反斜杠转义)
    注意到星号 * 之前的反斜杠 \， 因为 Git 有它自己的文件模式扩展匹配方式，所以我们不用 shell 来帮忙展开
    git rm -r <file>:   要删除的文件夹不是空文件夹的情况下,要加-r参数才能成功删除非空文件夹(递归删除)
    git rm --cached <file>: 删除版本库中的文件,但工作目录下的文件不删除.
        适用情况:把不需要版本控制的文件添加到版本库中时使用,使用后再把该文件添加到.gitignore
    git rm -f <file>: 用于强制删除已将修改存放到暂存区的文件 

git mv <oldFileName> <newFileName>: 改名或移动文件.
    实际上这条命令执行了三条命令
        mv <oldFileName> <newFileName>
        git rm <oldFileName>
        git add <newFileName>