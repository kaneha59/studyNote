pwd:    显示当前所在目录
mkdir:  创建目录
    示例: $ mkdir newFile
cd: 进入目录
cat <file>: 显示该文件内容
git config: 应该是用来进行git的配置
git init:   把当前所在目录变成git管理的仓库,(创建.git文件夹)
git add <file>: 把指定文件的改动添加到暂存区
    git add .:      把当前目录及子目录的改动添加到暂存区
    git add all:    把所有改动提交到暂存区
git commit -m <message>:    提交修改(必须要添加-m参数来添加改动说明)
    示例: $ git commit -m "wrote a readme file"
git status <file>:  展示当前仓库状态(比如哪些文件发生修改等等)

git diff <file>:    工作区 ××× 暂存区
    git diff HEAD <-- file>:    工作区 ××× 仓库
    git diff --cached:  暂存区 ××× 仓库

git log <--参数>
    显示日志,按q退出日志界面
        参数:
            --pretty=oneline    (每条记录仅显示一行)
git reset
    git reset HEAD file:    放弃指定文件的缓存(相当于撤销add操作,工作区的改动并没有被撤销)
    git reset --hard commit_id: 修改当前版本.commit_id可以填:commit_id或者head^,head^^,...head~100
git reflog
    显示版本历史以及使用过的修改版本的命令,可以用这个命令获取之前使用过的命令,并从该命令中得到commit id
git checkout
    git checkout -- file:   未使用add缓存代码时,删除掉工作区中的改动(和缓存区保持一致,相当于把缓存区检出到工作区) 
    (*** git2.0以后的版本,使用git restore file 来放弃工作区的修改 ***)
git rm <file>:  把指定文件从版本库中移除(记得commit)