
1.两个分支没有分叉(在一条线上,即master分支是fix分支的直接祖先)
    合并过程:
        使用快进(fast-forward)模式,只是简单地把指针向前移动,实现合并.
        (因为这种情况下是不会发生冲突的)
    造成的问题:
        没有merge记录,删除旧分支后log中完全不会留下任何记录
        解决办法: git merge --no-ff <分支名>: 使用--no-ff参数,禁用快进

    图示:
                                    master     fix
        C0  <---  C1  <---  C2  <---  C3  <---  C4
****************************************************************************
                                                fix
                                                master
        C0  <---  C1  <---  C2  <---  C3  <---  C4

2.两个分支有分叉
    图示:
                                               master
        C0  <---  C1  <---  C2  <---  C3  <---  C5
                                          <---  C4  <---  C6
                                                          dev
****************************************************************************
                                                                   master
        C0  <---  C1  <---  C2  <---  C3  <---  C5  <-------------  C7
                                          <---  C4  <---  C6  <---
                                                          dev
    合并过程:
        由于分支只见有分叉,所以不能使用快进(fast-forward)模式,转而使用"三方合并".
        使用两个分支的末端快照(C5和C6),以及这两个分支的共同祖先快照(C3),执行三方合并.
        Git会自行决定选取哪个提交作为共同祖先,并以此为基础进行合并.

    有冲突时,需要手动解决冲突:
        因包含冲突而待解决的文件,都已未合并状态标识出来,可以用git status查看.
        手动解决冲突后add,在commit即可.
        (输入git mergetool,可以使用图形化工具来解决冲突)