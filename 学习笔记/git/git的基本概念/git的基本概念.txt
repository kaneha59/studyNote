1. Git 保存的不是文件的变化或者差异，而是一系列不同时刻的文件快照
        每个提交都保存快照,快照是什么?会不会耗费很大的存储空间?(参考'git快照和文件存储.txt')

2. 在进行提交操作时，Git 会保存一个提交对象（commit object）

3. 暂存和提交操作的实现过程?
    暂存:
        1).为每一个文件计算校验和
        2).把当前版本的文件快照用blob对象保存到Git仓库中
        3).把校验和加入到暂存区等待提交...
    提交:
        1).计算每一个子目录的校验和,然后在Git仓库中把这些校验和保存为树对象(构建树对象)
        2).创建提交对象,提交对象中包含指向树对象(项目根目录)的指针
    总结:
        提交对象-->树对象-->每一个文件的blob对象
        这样提交对象就可以根据指针找到每一个文件(blob对象)

4. 提交对象包含:
    1). 暂存内容快照的指针(指向树对象的指针)
            (文件在暂存时已经保存到Git仓库中了,有提交对象说明是已经提交过了,
            所以实际上保存的应该是树对象的指针,通过树对象保存的校验和指向每个文件)
    2). 作者信息
    3). 提交信息
    4). 指向它父对象的指针
            ***这里指针应该就是校验和***

5. 首次提交产生的提交对象没有父对象,多个分支合并产生的提交对象有多个父对象

6. Git的分支,<本质上仅仅是指向提交对象的可变指针>,每次提交操作后,该指针都会自动向前移动
        ***分支就是个可变指针***

7. HEAD:
        是一个特殊指针,它指向当前所在的本地分支(可以把HEAD当作当前分支的别名)
        可以理解为: HEAD用于追踪当前分支

8.分支开发工作流:长期分支和特性分支,
    参考: https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%88%86%E6%94%AF%E5%BC%80%E5%8F%91%E5%B7%A5%E4%BD%9C%E6%B5%81
