多线程
https://www.cnblogs.com/yjd_hycf_space/p/7526608.html
线程池
https://www.jianshu.com/p/50fffbf21b39

多线程:
    进程: 每个进程都有独立的代码和数据空间(进程上下文),进程间的切换会有较大的开销,一个进程包含1到多个线程.(进程是资源分配的最小单位)
    线程: 同一类线程共享代码和数据空间,每个线程有独立的运行栈和程序计数器(PC).线程切换开销小.(线程是cpu调度的最小单位)

    进程和线程有五个阶段: 创建, 就绪, 运行, 阻塞, 终止.

    实现多线程的2种方法:
        一.重写run()方法:
            1.继承Thread类,重写run()方法(Thread类实现了Runnable接口)
            2.实现Runnable接口,实现run()方法
            (实现Callable接口的方法暂时不讲)
        二.new Thread(Runnable target), 调用Thread的start()方法
        
    线程状态:
        新建状态(New): new了一个线程对象.
        就绪状态(Runnable): 调用start()方法后进入就绪状态,线程放入线程池中,等待执行.
        运行状态(Running): 线程获取CPU资源,开始执行代码;
        阻塞状态(Blocked): 线程放弃CPU使用权,暂时停止运行,知道线程进入就绪状态,才有机会进入运行状态
            等待阻塞: 当前线程执行wait()方法,JVM会把线程放入等待池中.(wait()会释放持有的锁)
            同步阻塞: 运行的线程在获取对象的同步锁时,若该同步锁被别的线程占用,则JVM会把该线程放入锁池中.
            其他阻塞: 当前线程执行sleep()或join()方法,或者发出I/O请求时,JVM会把该线程设置为阻塞状态.(sleep()不会释放锁)
        死亡状态(Dead): 线程执行完毕或因异常退出run()方法,则该线程结束生命周期.

    线程调度:
        线程优先级: 使用成员方法setPriority()和和getPriority()来设置/获取
            Theread类有3个静态常量:
                public static final int MAX_PRIORITY = 10;
                public static final int NORM_PRIORITY = 5;
                public static final int MIN_PRIORITY = 1;
            优先级越高的线程,越能获得越多的运行机会.
            java线程优先级使用int取值,取值范围是1-10.可以使用setPriority()或getPriority()方法来设置/获取线程优先级.
                setPriority(int newPriority) {...}
                getPriority() {...}
                注意: setPriority()和getPriority()都是非静态方法,所以不能使用Thread直接调用.意味着这两个方法是使用Thread实例调用的方法,即run()方法内不可调用.
            主线程默认优先级是: Thread.NORM_PRIORITY
            线程优先级有继承关系: 在A线程中创建的B线程,优先级和A相同
            推荐使用Thread中的3个静态常量来设置优先级: 保证更好的可移植性.

        线程调度方法:
            睡眠: Thread.sleep(long millis) 静态
                    不会释放锁,使线程进入阻塞状态,millis设定睡眠时间,以毫秒为单位.睡眠结束时线程进入就绪状态
            让步: Thread.yield() 静态
                    暂停正在执行的线程(进入就绪状态),让出CPU资源给相同或更高优先级的线程.
            等待: Object.wait(long timeoutMillis) 非静态
                    synchronized代码块内配合notify()notifyAll()使用.
                    释放持有的锁,让当前线程等待, 直到 其他线程调用此对象的notify()或notifyAll()唤醒方法.
            唤醒: Object.notify() 非静态
                    synchronized代码块内配合wait()使用.
                    唤醒此对象监视器上等待(wait)的单个线程.如果有多个等待线程,则随机唤醒一个.
                    传入参数则在参数时间到达后才进入等待状态.
            加入: Thread.join() 非静态
                    在当前线程调用其他线程的join()方法来加入其他线程,使当前线程进入阻塞,直到join()线程执行完,当前线程才会进入就绪状态.
                        比如在main()方法中执行t1.start();t2.start();t1.join();
                        t1.join()方法执行前,main,t1,t2同时争抢资源
                        t1.join()方法执行后,main方法进入阻塞,t1和t2争抢资源
                        t1线程执行完毕后,main线程进入就绪状态.若t2线程此时未执行完,则main和t2互相争抢资源.
                        即: join()方法只能影响当前线程 和 使用join()加入的线程,对其他线程毫无影响.(比如在main线程内调用t1.join()使t1加入)
            Thread.interrupt() 非静态
                    作用是给线程设置一个中断标志(通知该线程该被中断了,但不会真的中断线程).
                    一个线程不应该由其他线程来强制中断或停止,而应该由线程自行停止.
                    具体来说:
                        线程正常活动时,把中断状态设置为true(不打断线程,该线程正常运行),
                        若此时该线程处在阻塞状态,则退出阻塞状态,抛出异常InterruptedException,且中断状态为false
            Thread.interrupted() 静态
                    静态方法,返回当前中断状态,并清除中断状态.中断状态为true则返回true,为false则返回false,清除后再调用interrupted()会返回false,因为中断状态已被清除.
            Thread.isInterrupted() 非静态
                    非静态方法,返回当前中断状态,但不会清除中断状态.
        分析:            
            yield()和sleep()是静态方法,直接使用Thread来调用.
            wait(), notify(), join()是成员方法,使用Thread对象来调用.
        关于wait()和notify(): 
            1. 当一个线程进入wait()状态后,必须调用notify()或者notifyAll()方法才会唤醒.
            2. wait()和notify()/notifyAll()方法必须在synchronized方法块内使用.否则会报错: current thread not owner
            3. wait()和notify()/notifyAll()必须搭配使用,一个负责使当前线程释放锁并进入等待状态,一个负责唤醒其他等待状态(wait)的线程
            4. 怎么使用: 当flag为false时调用wait()方法,释放锁,其他线程获取锁后改变flag为true则调用notify()方法唤醒等待线程.
            5. 参考链接: https://www.cnblogs.com/lyx210019/p/9427146.html
    synchronized关键字:
        修饰代码块: 表示该代码块是同步代码块, 需要指定加锁的对象  synchronized(加锁的对象) {...}
        修饰方法: 给调用当前方法的对象加锁
        修饰类: 锁该类的类对象(类.Class)
        修饰静态方法: 锁该方法对应的类的类对象(类.Class)
        貌似写的是错的...多线程对一个static变量递增,run()方法中锁this无法保证递增原子性,但锁Class对象可以,为啥?
        锁当前对象(this)和锁class对象的区别?
            Person对象实现Runnable接口,有静态int变量money.run()方法中money递增10万次.
                情况一:
                    new一个Person对象p1,以p1为参数起3个线程,分别调用start()方法.最后打印Person.money
                        不加锁: money < 30万
                        锁this: money = 30万
                        锁Person.class: money = 30万
                情况二:
                    new三个Person对象p1, p2, p3,分别起3个线程,调用start()方法,最后打印Person.money
                        不加锁: money < 30万 
                        锁this: money < 30万  
                        锁Person.class: money = 30万 
            结论: 
                锁this: this对象内有一把锁,多线程需要争抢锁来执行同步代码块.
                            但同一类型的其他对象不需要获得锁就能执行同步代码块
                锁Class对象: 整个类的所有对象共享一把锁,多线程需要争抢锁来执行同步代码块.
                            不论多个线程操作同一对象,还是多线程操作同类型不同对象,遇到同步代码块都需要持有锁才能执行
        其他:
            1.synchronized关键字不能继承,重写的方法要重新加上synchronized关键字
    什么是死锁?
        线程间互相等待对方的锁,结果谁都拿不到锁,导致死锁.

    常见线程名字解释:
        主线程: main()线程
        当前线程: 一般指通过Thread.currentThread()来获取的线程.
        后台线程: 为其他线程提供服务的线程,也成为守护线程.比如JVM的垃圾回收线程就是后台线程
        前台线程: 接收后台线程服务的线程.和守护线程的区别是: 是否等待主线程,随主线程结束而结束
    线程的其他常用方法:
        isAlive(): 线程是否存活
        activeCount(): 程序中活跃的线程数
        enumerate(): 枚举程序中的线程
        currentThread(): 获取当前线程
        isDaemon(): 判断一个线程是否是守护线程.   Daemon:意思是守护线程
        setDaemon(): 设置一个线程为守护线程
        setName(): 给线程起名
    volatile关键字:
        不懂.以后搞定
    什么是锁池?
    什么是对象监视器?
