1.Maven项目默认目录(约定优于配置)
  src -->源代码和测试代码的根目录
    inner_other_Maven_projects...
    main
      java
      resources
    test
      java
      resources
  target  -->编译后的类文件,jar文件等
    ....
  pom.xml -->maven配置文件

2.<dependencyManagement>和<dependencies>的区别
  <dependencyManagement>:
    用于统一管理依赖,比如版本(version), 类型(type), 使用阶段(scope)等等...
    它并不会真的引入依赖,仅仅用于管理!(说的就是dependencyManagement下的dependencies)
  <dependencies>
    用于引入依赖.
    如果引用的依赖在<dependencyManagement>中已经有设置,则可以只写groupId和artifactId,其他配置会自动使用<dependencyManagement>中的配置

3.Maven的单继承和多继承
  3.1)单继承:
    使用<parent>标签,用于声明继承于某个Maven项目
  3.2)多继承:
    多继承的实现需要靠<dependencyManagement>来实现.
      3.2.1)首先,在pom中声明<dependencyManagement>标签,在<dependency>中引入想要继承的pom文件.
        (注: 必须在<dependency>中声明type和scope,且type=pom, scope=import)
      3.2.2)然后,继承关系就构建完成了,就可以在<dependencies>中引入父级pom中管理的依赖了

4.<peoperties>元素
  用于自定义属性,并且可以在别的元素中使用${属性名}的方式引用属性的值
    自定义属性范例:<test.oneprops>1.0.0</test.oneprops>
    引用该属性的值:${test.oneprops}
  此外,还有其他的功能,比如:
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> -->设定项目的unicode编码

5.<dependency>
  groupId: 
  artifactId: 
  version: 指定依赖的版本号,也可以只填写SNAPSHOT, LATEST, RELEASE
  type: 声明引入依赖的类型,比如jar,war,pom等
  scope: 定义了该依赖在项目中的使用阶段
    compile:  编译:√ 测试:√ 运行:√  默认值,编译,测试,运行时皆可用,会被打包进去
    provided: 编译:√ 测试:√ 运行:×  仅能参与编译和测试阶段,但打包时会被exclude,期望运行环境会提供(比如tomcat或基础类库之类的)
    runtime:  编译:× 测试:× 运行:√  编译和测试阶段不可用,会随项目发布(比如JDBC)
    test:     编译:√ 测试:√ 运行:×  用作测试,运行时不会被随项目发布(比如junit)
    system:   编译:√ 测试:√ 运行:×  使用上跟provided相同,不同处是: 该依赖不从maven仓库中提取,而是使用本地文件,参照systemPath的属性进行提取依赖
    import:   dependencyManagement中专用,解决maven单继承的问题
  exclusions: 依赖排除
  classifier
  systemPath: 引用本地jar包而非仓库中的jar包时,用于指定本地jar包的路径:
              比如: <systempath>${basedir}/lib/hamcrest-core-1.3.jar</systempath>
  optional: 设定依赖传递(父级项目的依赖是否会传递给子级项目)
            比如: parent项目依赖了junit,并设置optional=true,那么继承parent的sun项目就不会自动引入junit依赖
            optional的默认值为:false
            optional=true时(即该依赖不会被传递),子项目要引入该依赖,必须手动设置了
            !!注意: 父级项目不能在子级项目内!否则设置了也白设置,一样会被引入 
  注: 主项目下的其他项目引用了某一依赖A时,不管该下级项目和主项目是否有继承关系,该依赖A都会被引入!

下一步学习目标:
  1.<project>下的其他标签
  2.maven插件
  3.maven的生命周期



<profiles>
  https://blog.csdn.net/java_collect/article/details/83870215
  
