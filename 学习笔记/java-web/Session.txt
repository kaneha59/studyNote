什么是Session?
    Session是服务端使用的一种记录客户状态的机制,作用和Cookie相似,但有许多不同
        1.存储位置: Cookie存储在客户端, Session存储在服务器内存

如何保证Session和客户端唯一匹配?
    Session在生成后,会随response向客户端发送名为sessionid的cookie,当客户端请求再次来临时,用请求带来的sessionid来实现唯一匹配

Session有哪些属性?
    1.id: 指定一个唯一的session对象
    2.maxInactiveInterval: 超时时间,tomcat默认是30分钟,可以自行设置
    3.creationTime: 创建时间
    4.lastAccessedTime: 最近连接时间,每当客户再次连接服务器时,都会记录该时间
    
Session的方法:
    set方法: 
        setMaxInactiveInterval();
        setAttribute();
    get方法:
        上边4个属性的get方法;
        getAttribute();
        getAttributeNames(); -->获取所有attribute的名字,返回Enumeration<String>
        getServletContext();
    其他方法:
        invalidate(); --> 使该session失效
        isNew(); -->判断是否是新建的session
        removeAttribute();

如果浏览器禁用cookie,怎么使用Session?
    重写URL:
        可以使用HttpServletResponse的encodeURL(String URL)的方法该方法会将该URL对应的响应体(页面)中所有的URL上添加sessionid属性
        这样当客户端拿到该页面后,点击页面上任何url,都会将sessionid发送至后端
        如果是重定向,可以使用另外一个方法: encodeRedirectURL(String URL)
        注: 只有使用页面模板,由后端渲染画面时该方法才可用(因为该方法是在后端渲染页面时重写页面中的URL的)

Session的生命周期
    Session的创建时机
        Session只有在调用request.getSession()方法时才会被创建,调用request.getSession(false)方法时不会被创建.
        为什么客户端访问JSP页面会自动创建Session: 因为JSP在底层调用了request.getSession()方法.
        注: request.getSession()等同于request.getSession(true)
    Session的销毁:
        Session在会话结束时并不会失效,只能手动销毁或等session超时自动销毁.