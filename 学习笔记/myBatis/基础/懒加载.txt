什么是延迟加载(懒加载):
    调用嵌套SELECT查询时,先不执行嵌套的查询语句,按需加载属性.
    在 调用延迟加载属性 或 调用触发延迟加载的方法时 才加载延迟加载属性

嵌套SELECT查询和嵌套结果映射:
    嵌套SELECT查询: 可以使用懒加载
    嵌套结果映射: 不能使用懒加载

懒加载相关设置:
    <settings>
        lazyLoadingEnabled: TRUE/FALSE(默认) 
            是否开启延迟加载,特定关联关系中可通过设置 fetchType 属性来覆盖该项的开关状态。
        
        aggressiveLazyLoading: TRUE/FALSE(默认)  
            开启时,有延迟加载属性的对象在被任何方法调用时都将加载全部属性(导致懒加载实际上没啥效果)
            (即使调用非延迟加载的属性也会加载全部属性)

        lazyLoadTriggerMethods: 默认值是"equals,clone,hashCode,toString"
            指定哪些方法会触发延迟加载(加载延迟加载的属性),可以手动增加其他方法
    
如何使懒加载真正生效:
    如果要延迟加载真正有效的话,必须同时
        开启lazyLoadingEnabled(默认false)
        和
        关闭aggressiveLazyLoading(3.4.1之后的版本默认false)

什么是N+1问题?
    例如:
        1.你执行了一个SQL查询语句获取了一个列表(因为开启了懒加载,延迟加载属性没有被加载,即没有调用嵌套SELECT)
        2.结果你对列表中的每一条记录,都需要单独进行一次SELECT查询语句来加载详细信息(执行延迟加载)
    执行一条SELECT语句,因为懒加载的缘故,后续调用时可能需要执行大量的嵌套SELECT查询来加载延迟加载属性.
    这就是N+1问题. 由1带出来N

    如何避免:
        对于查询出结果后立刻遍历的对象,不要使用嵌套SELECT查询.(因为遍历时会导致瞬时大量SQL查询)


